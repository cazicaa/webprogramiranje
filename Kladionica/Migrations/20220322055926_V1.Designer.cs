// <auto-generated />
using Kladionica.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Kladionica.Migrations
{
    [DbContext(typeof(KladionicaContext))]
    [Migration("20220322055926_V1")]
    partial class V1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("GameTicket", b =>
                {
                    b.Property<int>("GameID")
                        .HasColumnType("int");

                    b.Property<int>("TicketsID")
                        .HasColumnType("int");

                    b.HasKey("GameID", "TicketsID");

                    b.HasIndex("TicketsID");

                    b.ToTable("GameTicket");
                });

            modelBuilder.Entity("Kladionica.Models.Game", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("ClubName1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClubName1");

                    b.Property<string>("ClubName2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ClubName2");

                    b.Property<double>("Multiplier1")
                        .HasColumnType("float")
                        .HasColumnName("Multiplier1");

                    b.Property<double>("Multiplier2")
                        .HasColumnType("float")
                        .HasColumnName("Multiplier2");

                    b.Property<double>("MultiplierX")
                        .HasColumnType("float")
                        .HasColumnName("MultiplierX");

                    b.Property<int>("TicketNumber")
                        .HasColumnType("int")
                        .HasColumnName("TicketNumber");

                    b.HasKey("ID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Kladionica.Models.Ticket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<double>("Multiplier")
                        .HasColumnType("float")
                        .HasColumnName("Multiplier");

                    b.Property<double>("Payout")
                        .HasColumnType("float")
                        .HasColumnName("Payout");

                    b.Property<double>("Stake")
                        .HasColumnType("float")
                        .HasColumnName("Stake");

                    b.Property<int>("TicketNumber")
                        .HasColumnType("int")
                        .HasColumnName("TicketNumber");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("ID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Kladionica.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<double>("Balance")
                        .HasColumnType("float")
                        .HasColumnName("Balance");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("IsAdmin");

                    b.Property<string>("JMBG")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("JMBG");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserName");

                    b.Property<string>("UserSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserSurname");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TicketUser", b =>
                {
                    b.Property<int>("TicketsID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("TicketsID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("TicketUser");
                });

            modelBuilder.Entity("GameTicket", b =>
                {
                    b.HasOne("Kladionica.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kladionica.Models.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketUser", b =>
                {
                    b.HasOne("Kladionica.Models.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kladionica.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
